// Generated by Dagger (https://google.github.io/dagger).
package com.me.cl.template.framework.viewmodel;

import android.arch.lifecycle.ViewModel;
import dagger.internal.Factory;
import java.util.Map;
import javax.inject.Provider;

public final class MyViewModelFactory_Factory implements Factory<MyViewModelFactory> {
  private final Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> creatorsProvider;

  public MyViewModelFactory_Factory(
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> creatorsProvider) {
    this.creatorsProvider = creatorsProvider;
  }

  @Override
  public MyViewModelFactory get() {
    return provideInstance(creatorsProvider);
  }

  public static MyViewModelFactory provideInstance(
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> creatorsProvider) {
    return new MyViewModelFactory(creatorsProvider.get());
  }

  public static MyViewModelFactory_Factory create(
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> creatorsProvider) {
    return new MyViewModelFactory_Factory(creatorsProvider);
  }

  public static MyViewModelFactory newMyViewModelFactory(
      Map<Class<? extends ViewModel>, Provider<ViewModel>> creators) {
    return new MyViewModelFactory(creators);
  }
}
